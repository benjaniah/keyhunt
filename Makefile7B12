# Compiler flags for C++ and C
CXXFLAGS = -m64 -march=znver3 -mtune=znver3 -mavx2 -mfma -Wall -Wextra -Wno-deprecated-copy \
           -O3 -funroll-loops -fomit-frame-pointer -pipe -ftree-vectorize -flto
CFLAGS   = -m64 -march=znver3 -mtune=znver3 -mavx2 -mfma -Wall -Wextra \
           -O3 -funroll-loops -fomit-frame-pointer -pipe -ftree-vectorize

# Default target
default:
	g++ $(CXXFLAGS) -c oldbloom/bloom.cpp -o oldbloom.o
	g++ $(CXXFLAGS) -c bloom/bloom.cpp -o bloom.o
	gcc $(CFLAGS) -c base58/base58.c -o base58.o
	gcc $(CFLAGS) -c rmd160/rmd160.c -o rmd160.o
	g++ $(CXXFLAGS) -c sha3/sha3.c -o sha3.o
	g++ $(CXXFLAGS) -c sha3/keccak.c -o keccak.o
	gcc $(CFLAGS) -c xxhash/xxhash.c -o xxhash.o
	g++ $(CXXFLAGS) -c util.c -o util.o
	g++ $(CXXFLAGS) -c secp256k1/Int.cpp -o Int.o
	g++ $(CXXFLAGS) -c secp256k1/Point.cpp -o Point.o
	g++ $(CXXFLAGS) -c secp256k1/SECP256K1.cpp -o SECP256K1.o
	g++ $(CXXFLAGS) -c secp256k1/IntMod.cpp -o IntMod.o
	g++ $(CXXFLAGS) -c secp256k1/Random.cpp -o Random.o
	g++ $(CXXFLAGS) -c secp256k1/IntGroup.cpp -o IntGroup.o
	g++ $(CXXFLAGS) -c hash/ripemd160.cpp -o hash/ripemd160.o
	g++ $(CXXFLAGS) -c hash/sha256.cpp -o hash/sha256.o
	g++ $(CXXFLAGS) -c hash/ripemd160_sse.cpp -o hash/ripemd160_sse.o
	g++ $(CXXFLAGS) -c hash/sha256_sse.cpp -o hash/sha256_sse.o
	g++ $(CXXFLAGS) -o keyhunt keyhunt.cpp base58.o rmd160.o hash/ripemd160.o hash/ripemd160_sse.o \
		hash/sha256.o hash/sha256_sse.o bloom.o oldbloom.o xxhash.o util.o Int.o Point.o \
		SECP256K1.o IntMod.o Random.o IntGroup.o sha3.o keccak.o -lm -lpthread
	rm -r *.o

# Clean target
clean:
	rm keyhunt

# Legacy build (original, with legacy GMP256K1 backend)
legacy:
	g++ $(CXXFLAGS) -c oldbloom/bloom.cpp -o oldbloom.o
	g++ $(CXXFLAGS) -c bloom/bloom.cpp -o bloom.o
	gcc $(CFLAGS) -Wno-unused-result -c base58/base58.c -o base58.o
	gcc $(CFLAGS) -c xxhash/xxhash.c -o xxhash.o
	g++ $(CXXFLAGS) -c util.c -o util.o
	g++ $(CXXFLAGS) -c sha3/sha3.c -o sha3.o
	g++ $(CXXFLAGS) -c sha3/keccak.c -o keccak.o
	g++ $(CXXFLAGS) -c hashing.c -o hashing.o
	g++ $(CXXFLAGS) -c gmp256k1/Int.cpp -o Int.o
	g++ $(CXXFLAGS) -c gmp256k1/Point.cpp -o Point.o
	g++ $(CXXFLAGS) -c gmp256k1/GMP256K1.cpp -o GMP256K1.o
	g++ $(CXXFLAGS) -c gmp256k1/IntMod.cpp -o IntMod.o
	g++ $(CXXFLAGS) -c gmp256k1/Random.cpp -o Random.o
	g++ $(CXXFLAGS) -c gmp256k1/IntGroup.cpp -o IntGroup.o
	g++ $(CXXFLAGS) -o keyhunt keyhunt_legacy.cpp base58.o bloom.o oldbloom.o xxhash.o util.o \
		Int.o Point.o GMP256K1.o IntMod.o IntGroup.o Random.o hashing.o sha3.o keccak.o \
		-lm -lpthread -lcrypto -lgmp
	rm -r *.o

# BSGSD mode build
bsgsd:
	g++ $(CXXFLAGS) -c oldbloom/bloom.cpp -o oldbloom.o
	g++ $(CXXFLAGS) -c bloom/bloom.cpp -o bloom.o
	gcc $(CFLAGS) -Wno-unused-parameter -c base58/base58.c -o base58.o
	gcc $(CFLAGS) -c rmd160/rmd160.c -o rmd160.o
	g++ $(CXXFLAGS) -c sha3/sha3.c -o sha3.o
	g++ $(CXXFLAGS) -c sha3/keccak.c -o keccak.o
	gcc $(CFLAGS) -c xxhash/xxhash.c -o xxhash.o
	g++ $(CXXFLAGS) -c util.c -o util.o
	g++ $(CXXFLAGS) -c secp256k1/Int.cpp -o Int.o
	g++ $(CXXFLAGS) -c secp256k1/Point.cpp -o Point.o
	g++ $(CXXFLAGS) -c secp256k1/SECP256K1.cpp -o SECP256K1.o
	g++ $(CXXFLAGS) -c secp256k1/IntMod.cpp -o IntMod.o
	g++ $(CXXFLAGS) -c secp256k1/Random.cpp -o Random.o
	g++ $(CXXFLAGS) -c secp256k1/IntGroup.cpp -o IntGroup.o
	g++ $(CXXFLAGS) -c hash/ripemd160.cpp -o hash/ripemd160.o
	g++ $(CXXFLAGS) -c hash/sha256.cpp -o hash/sha256.o
	g++ $(CXXFLAGS) -c hash/ripemd160_sse.cpp -o hash/ripemd160_sse.o
	g++ $(CXXFLAGS) -c hash/sha256_sse.cpp -o hash/sha256_sse.o
	g++ $(CXXFLAGS) -o bsgsd bsgsd.cpp base58.o rmd160.o hash/ripemd160.o hash/ripemd160_sse.o \
		hash/sha256.o hash/sha256_sse.o bloom.o oldbloom.o xxhash.o util.o Int.o Point.o \
		SECP256K1.o IntMod.o Random.o IntGroup.o sha3.o keccak.o -lm -lpthread
	rm -r *.o
